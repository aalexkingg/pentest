import optparse
from socket import *
import socket
from threading import Thread, Semaphore
import nmap

screenLock = Semaphore(value=1)

class Target:

    # target attributes

    def __init__(self) -> None:
        pass



class PortScanner:
    def __init__(self) -> None:
        pass

    def nmapScan(self, tgtHost, tgtPort):
        nmScan = nmap.PortScanner()
        nmScan.scan(tgtHost, tgtPort)

        state = nmScan[tgtHost]['tcp'][int(tgtPort)]['state']

        print("[+] " + tgtHost + " tcp/" + tgtPort + " " + state)

    def connScan(self, tgtHost, tgtPort):
        try:
            connSkt = socket(AF_INET, SOCK_STREAM)
            connSkt.connect((tgtHost, tgtPort))

            connSkt.send('probe test')
            results = connSkt.recv(100)

            screenLock.acquire()

            print('[+]%d/tcp open'% tgtPort)
            print('[+] ' + str(results))
            connSkt.close()

        except:
            screenLock.acquire()
            print('[-]%d/tcp closed'% tgtPort)

        finally:
            screenLock.release()
            connSkt.close()
        
    def TCP(self, tgtHost, tgtPorts):
        """
        Scans for open TCP ports on target server

        Returns: str: List of open ports
        """
        try:
            tgtIP = gethostbyname(tgtHost)
        
        except:
            print("[-] Cannot resolve '%s': Unknown host"% tgtHost)
            return

        try:
            tgtName = gethostbyaddr(tgtIP)
            print('\n[+] Scan Results for: ' + tgtName[0])

        except:
            print('\n[+] Scan Results for: ' + tgtIP)

        setdefaulttimeout(1)

        for tgtPort in tgtPorts:

            self.nmapScan(tgtHost, tgtPort)

            #t = Thread(target=self.connScan, args=(tgtHost, int(tgtPort)))
            #print('Scanning port ' + tgtPort)
            #t.start()


class Botnet:
    def __init__(self) -> None:
        pass

    


def main() -> None:
    parser = optparse.OptionParser('usage %prog -H' + '<target host> -p <target port>')

    parser.add_option('-H', dest='tgtHost', type='string', help='specify target host')

    parser.add_option('-p', dest='tgtPort', type='int', help='specify target port')

    (options, args) = parser.parse_args()

    tgtHost = options.tgtHost
    tgtPorts = str(options.tgtPort).split(', ')

    if (tgtHost == None) | (tgtPorts[0] == None):
        print(parser.usage)
        exit(0)
    
    PortScanner.TCP(tgtHost, tgtPorts)

if __name__ == "__main__":
    main()